// <auto-generated />
using System;
using DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Models.Activity", b =>
                {
                    b.Property<Guid>("activiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTimeActivity")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<DateTime>("StartDateActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTimeActivity")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("activiteId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("DataLayer.Models.Comments", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatePost")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<Guid?>("FoodServId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FoodServId");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<Guid?>("LodgingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LodgingId");

                    b.Property<string>("Post")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TransportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransportId");

                    b.HasKey("CommentId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("FoodServId");

                    b.HasIndex("Id");

                    b.HasIndex("LodgingId");

                    b.HasIndex("TransportId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DataLayer.Models.Experience", b =>
                {
                    b.Property<Guid>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DatType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExperienceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienceTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FoodExist")
                        .HasColumnType("bit");

                    b.Property<string>("HostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HostId");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LodgingExist")
                        .HasColumnType("bit");

                    b.Property<string>("MapLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("OtherCritics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PriceUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Spots")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TransportExist")
                        .HasColumnType("bit");

                    b.HasKey("ExperienceId");

                    b.HasIndex("ClientId");

                    b.HasIndex("HostId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.ExperienceDates", b =>
                {
                    b.Property<Guid>("ExperienceDatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTimeExpDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<DateTime>("StartTimeExpDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExperienceDatesId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("ExperienceDates");
                });

            modelBuilder.Entity("DataLayer.Models.ExperiencesReservation", b =>
                {
                    b.Property<Guid>("ExperienceReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ClientID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<string>("IntervalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("ExperienceReservations");
                });

            modelBuilder.Entity("DataLayer.Models.FoodExperience", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<string>("NameDish")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Foodxperience");
                });

            modelBuilder.Entity("DataLayer.Models.FoodReservation", b =>
                {
                    b.Property<Guid>("FoodReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ClientID");

                    b.Property<Guid>("FoodServId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FoodServId");

                    b.Property<decimal>("PriceFood")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Seats")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FoodServId");

                    b.ToTable("FoodReservation");
                });

            modelBuilder.Entity("DataLayer.Models.FoodService", b =>
                {
                    b.Property<Guid>("FoodServId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ClosingHour")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommercantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommercantId");

                    b.Property<string>("DaysOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FoodPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("OpenHour")
                        .HasColumnType("datetime2");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodServId");

                    b.HasIndex("CommercantId");

                    b.ToTable("foodServices");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingExperience", b =>
                {
                    b.Property<Guid>("LodgingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateLodgingExp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateLodgignExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LodgingId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("LodgingExperience");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingReservation", b =>
                {
                    b.Property<Guid>("LodgingReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ClientID");

                    b.Property<Guid>("LodgingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LodgingServiceId");

                    b.Property<decimal>("PriceLodging")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationLArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationLDeparture")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Seats")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LodgingReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("LodgingId");

                    b.ToTable("LodgingReservation");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingService", b =>
                {
                    b.Property<Guid>("LodgingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommercantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommercantId");

                    b.Property<string>("LodgingAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingDescript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LodgingWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LodgingId");

                    b.HasIndex("CommercantId");

                    b.ToTable("lodgingServices");
                });

            modelBuilder.Entity("DataLayer.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivitiyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivitiyId");

                    b.ToTable("PhotosActivities");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExperienceIDFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceIDFK");

                    b.ToTable("photosExperiences");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodServId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodServId");

                    b.ToTable("photosFoods");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosFoodExp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodxperineceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodxperineceId");

                    b.ToTable("photosFoodExps");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosLodgings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid>("LodgingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LodgingId");

                    b.ToTable("photosLodgings");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosLodgingsExp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid>("LodgingExperineceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LodgingExperineceId");

                    b.ToTable("photosLodgingsExps");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosRestaurants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodServId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodServId");

                    b.ToTable("photosRestaurants");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosTransports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TransportId");

                    b.ToTable("photosTransports");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosTransportsExp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransportExperineceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TransportExperineceId");

                    b.ToTable("photosTransportsExps");
                });

            modelBuilder.Entity("DataLayer.Models.ServicesLikes", b =>
                {
                    b.Property<Guid>("ServiceLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExperienceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<Guid?>("FoodServId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FoodServId");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<Guid?>("LodgingId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LodgingId");

                    b.Property<Guid?>("TransportId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransportId");

                    b.HasKey("ServiceLikeId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("FoodServId");

                    b.HasIndex("Id");

                    b.HasIndex("LodgingId");

                    b.HasIndex("TransportId");

                    b.ToTable("ServicesLikes");
                });

            modelBuilder.Entity("DataLayer.Models.SubTheme", b =>
                {
                    b.Property<int>("SubThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThemeID")
                        .HasColumnType("int");

                    b.HasKey("SubThemeId");

                    b.HasIndex("ThemeID");

                    b.ToTable("SubThemes");

                    b.HasData(
                        new
                        {
                            SubThemeId = 1,
                            Name = "Camping",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 2,
                            Name = "Hicking",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 3,
                            Name = "Prepare meals in nature",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 4,
                            Name = "walking",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 5,
                            Name = "hunt",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 6,
                            Name = "fishing",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 7,
                            Name = "sand diving",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 8,
                            Name = "Ski Palmier",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 9,
                            Name = "Back packing",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 10,
                            Name = "Night sky",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 11,
                            Name = "Back packing",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 12,
                            Name = "Nature and ecology tour",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 13,
                            Name = "plante et agriculture",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 14,
                            Name = "Activité plein air",
                            ThemeID = 1
                        },
                        new
                        {
                            SubThemeId = 15,
                            Name = "Beauté",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 16,
                            Name = "spa",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 17,
                            Name = "pleine conscience",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 18,
                            Name = "thérapie de corps",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 19,
                            Name = "Etat d’esprit",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 20,
                            Name = "Yoga",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 21,
                            Name = "santé holistique",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 22,
                            Name = "Divination",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 23,
                            Name = "Autre Expérience Bien-être",
                            ThemeID = 2
                        },
                        new
                        {
                            SubThemeId = 24,
                            Name = "cuisineet alimentation",
                            ThemeID = 3
                        },
                        new
                        {
                            SubThemeId = 25,
                            Name = "degustation gastroNameique",
                            ThemeID = 3
                        },
                        new
                        {
                            SubThemeId = 26,
                            Name = "diner en groupe",
                            ThemeID = 3
                        },
                        new
                        {
                            SubThemeId = 27,
                            Name = "Visite de marché et gastroNameie",
                            ThemeID = 3
                        },
                        new
                        {
                            SubThemeId = 28,
                            Name = "sport",
                            ThemeID = 4
                        },
                        new
                        {
                            SubThemeId = 29,
                            Name = "sycling",
                            ThemeID = 4
                        },
                        new
                        {
                            SubThemeId = 30,
                            Name = "Divertissement",
                            ThemeID = 4
                        },
                        new
                        {
                            SubThemeId = 31,
                            Name = "Cours sur l’entrepreneuriat",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 32,
                            Name = "Conférence culturelle",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 33,
                            Name = "Cours de langue ",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 34,
                            Name = " Visite d’usine",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 35,
                            Name = "Visite de campagne ",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 36,
                            Name = " Autre activité culturelle",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 37,
                            Name = " Cours de sciences ",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 38,
                            Name = "conférence sur des enjeux sociaux",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 39,
                            Name = "Danse culturelle",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 40,
                            Name = "Visite culturelle ",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 41,
                            Name = "visite de bureau",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 42,
                            Name = " Festival Culturelle",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 43,
                            Name = " Mariage traditionnelle",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 44,
                            Name = "tatouage traditionnelle ",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 45,
                            Name = " Vivre une experience avec une famille",
                            ThemeID = 5
                        },
                        new
                        {
                            SubThemeId = 46,
                            Name = "SeaDiving",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 47,
                            Name = "Parachute",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 48,
                            Name = " Location pédale a eau/bateau",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 49,
                            Name = "Snorking",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 50,
                            Name = " Bataille d’eau ",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 51,
                            Name = "Apprendre à nager",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 52,
                            Name = "sport nautrique",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 53,
                            Name = "chercher des coquillages ",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 54,
                            Name = "Bâtir des châteaux de sable",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 55,
                            Name = "S’enterrer dans les sables",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 56,
                            Name = "Morpion dans le sable",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 57,
                            Name = "découvrir le chair à voile ",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 58,
                            Name = "Jeux de ballon",
                            ThemeID = 6
                        },
                        new
                        {
                            SubThemeId = 59,
                            Name = "Jetski",
                            ThemeID = 7
                        },
                        new
                        {
                            SubThemeId = 60,
                            Name = "shooping",
                            ThemeID = 7
                        },
                        new
                        {
                            SubThemeId = 61,
                            Name = "boisson",
                            ThemeID = 7
                        },
                        new
                        {
                            SubThemeId = 62,
                            Name = "animaux",
                            ThemeID = 7
                        },
                        new
                        {
                            SubThemeId = 63,
                            Name = "gambling",
                            ThemeID = 7
                        },
                        new
                        {
                            SubThemeId = 64,
                            Name = "tour de bar",
                            ThemeID = 7
                        });
                });

            modelBuilder.Entity("DataLayer.Models.Theme", b =>
                {
                    b.Property<int>("ThemeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThemeID");

                    b.ToTable("Themes");

                    b.HasData(
                        new
                        {
                            ThemeID = 1,
                            Name = "Nature"
                        },
                        new
                        {
                            ThemeID = 2,
                            Name = "Health"
                        },
                        new
                        {
                            ThemeID = 3,
                            Name = "Food"
                        },
                        new
                        {
                            ThemeID = 4,
                            Name = "Event"
                        },
                        new
                        {
                            ThemeID = 5,
                            Name = "Culture"
                        },
                        new
                        {
                            ThemeID = 6,
                            Name = "Seaside"
                        },
                        new
                        {
                            ThemeID = 7,
                            Name = "autres"
                        });
                });

            modelBuilder.Entity("DataLayer.Models.TransportExperience", b =>
                {
                    b.Property<Guid>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExperienceId");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("ToGoFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToGoFromDeparture")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToGoTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToGoToArrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToReturnFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToReturnFromDeparture")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToReturnTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToReturnToArrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehiculeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("TransportExperience");
                });

            modelBuilder.Entity("DataLayer.Models.TransportReservation", b =>
                {
                    b.Property<Guid>("TransportReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ClientID");

                    b.Property<DateTime>("EndDateReservation")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceTransport")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDateReservation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransportServiceId");

                    b.HasKey("TransportReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TransportId");

                    b.ToTable("TransportReservation");
                });

            modelBuilder.Entity("DataLayer.Models.TransportService", b =>
                {
                    b.Property<Guid>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommercantId");

                    b.Property<string>("Gouvernorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeatd")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehiculeRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehuculeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportId");

                    b.HasIndex("CommercantId");

                    b.ToTable("transportServices");
                });

            modelBuilder.Entity("DataLayer.Models.UserLikes", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userLikesId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.HasKey("LikeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("userLikesId");

                    b.ToTable("UserLikes");
                });

            modelBuilder.Entity("DataLayer.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Users");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ea27411c-4e0f-4173-986f-8dff44f25a18",
                            ConcurrencyStamp = "13f8bce5-2197-4b92-93fd-a930fa870b42",
                            Name = "Adminisatrateur",
                            NormalizedName = "ADMINISTRATEUR"
                        },
                        new
                        {
                            Id = "2ce052c5-c29a-4d95-abd7-a9a5118a7506",
                            ConcurrencyStamp = "5e1a2960-6720-4f79-8909-10bb2c919cdc",
                            Name = "Host",
                            NormalizedName = "HOST"
                        },
                        new
                        {
                            Id = "73ad3d98-ebad-44fc-adee-4301ca8abdc5",
                            ConcurrencyStamp = "ba3cee45-6b41-41d2-ba64-d5b44daf9165",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "51203033-112b-4d2a-989f-46e6d72abe1a",
                            ConcurrencyStamp = "df60d79d-b85c-4871-9aba-9c55c6f0bc84",
                            Name = "Commercant",
                            NormalizedName = "COMMERCANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataLayer.Models.Admin", b =>
                {
                    b.HasBaseType("DataLayer.Models.Users");

                    b.Property<string>("NomAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrenomAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("DataLayer.Models.Client", b =>
                {
                    b.HasBaseType("DataLayer.Models.Users");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("Client_Telephone");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("DataLayer.Models.Hote", b =>
                {
                    b.HasBaseType("DataLayer.Models.Users");

                    b.Property<string>("CINCopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Delegation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FemaleWorkforce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gouvernorate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceCopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaleWorkforce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCnss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersAContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RNECopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Verified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Hote");
                });

            modelBuilder.Entity("DataLayer.Models.Commercant", b =>
                {
                    b.HasBaseType("DataLayer.Models.Hote");

                    b.Property<string>("BasicActivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CADTouristTraansp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantSpeciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Commercant");
                });

            modelBuilder.Entity("DataLayer.Models.Activity", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("Activites")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.Comments", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "experience")
                        .WithMany("Comments")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataLayer.Models.FoodService", "foodService")
                        .WithMany("Comments")
                        .HasForeignKey("FoodServId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataLayer.Models.Users", "users")
                        .WithMany("Comments")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.LodgingService", "lodgingService")
                        .WithMany("Comments")
                        .HasForeignKey("LodgingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataLayer.Models.TransportService", "transportService")
                        .WithMany("Comments")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("experience");

                    b.Navigation("foodService");

                    b.Navigation("lodgingService");

                    b.Navigation("transportService");

                    b.Navigation("users");
                });

            modelBuilder.Entity("DataLayer.Models.Experience", b =>
                {
                    b.HasOne("DataLayer.Models.Client", null)
                        .WithMany("Experiences")
                        .HasForeignKey("ClientId");

                    b.HasOne("DataLayer.Models.Hote", "Host")
                        .WithMany("Experiences")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("DataLayer.Models.ExperienceDates", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("ExperienceDates")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.ExperiencesReservation", b =>
                {
                    b.HasOne("DataLayer.Models.Client", "Client")
                        .WithMany("ExperiencesReservation")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("ExperiencesReservation")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.FoodExperience", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "experience")
                        .WithMany("FoodExperience")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("experience");
                });

            modelBuilder.Entity("DataLayer.Models.FoodReservation", b =>
                {
                    b.HasOne("DataLayer.Models.Client", "Client")
                        .WithMany("FoodReservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.FoodService", "FoodServicee")
                        .WithMany("FoodReservations")
                        .HasForeignKey("FoodServId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("FoodServicee");
                });

            modelBuilder.Entity("DataLayer.Models.FoodService", b =>
                {
                    b.HasOne("DataLayer.Models.Commercant", "Commercant")
                        .WithMany("FoodServices")
                        .HasForeignKey("CommercantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commercant");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingExperience", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "experience")
                        .WithMany("LodgingExperience")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("experience");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingReservation", b =>
                {
                    b.HasOne("DataLayer.Models.Client", "Client")
                        .WithMany("LodgingReservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.LodgingService", "LodgingServicee")
                        .WithMany("LodgingReservations")
                        .HasForeignKey("LodgingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("LodgingServicee");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingService", b =>
                {
                    b.HasOne("DataLayer.Models.Commercant", "Commercant")
                        .WithMany("LodgingServices")
                        .HasForeignKey("CommercantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commercant");
                });

            modelBuilder.Entity("DataLayer.Models.Photo", b =>
                {
                    b.HasOne("DataLayer.Models.Users", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosActivity", b =>
                {
                    b.HasOne("DataLayer.Models.Activity", "Activity")
                        .WithMany("Activityphoto")
                        .HasForeignKey("ActivitiyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosExperience", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "Experience")
                        .WithMany("Photos")
                        .HasForeignKey("ExperienceIDFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosFood", b =>
                {
                    b.HasOne("DataLayer.Models.FoodService", "foodService")
                        .WithMany("Foodhoto")
                        .HasForeignKey("FoodServId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("foodService");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosFoodExp", b =>
                {
                    b.HasOne("DataLayer.Models.FoodExperience", "FoodExperience")
                        .WithMany("Foodphoto")
                        .HasForeignKey("FoodxperineceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodExperience");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosLodgings", b =>
                {
                    b.HasOne("DataLayer.Models.LodgingService", "lodgingService")
                        .WithMany("Lodgingphoto")
                        .HasForeignKey("LodgingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lodgingService");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosLodgingsExp", b =>
                {
                    b.HasOne("DataLayer.Models.LodgingExperience", "LodgingExperience")
                        .WithMany("Lodgingphoto")
                        .HasForeignKey("LodgingExperineceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LodgingExperience");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosRestaurants", b =>
                {
                    b.HasOne("DataLayer.Models.FoodService", "restaurantService")
                        .WithMany("RestaurantPhotos")
                        .HasForeignKey("FoodServId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("restaurantService");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosTransports", b =>
                {
                    b.HasOne("DataLayer.Models.TransportService", "TransportService")
                        .WithMany("Transportphoto")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportService");
                });

            modelBuilder.Entity("DataLayer.Models.PhotosTransportsExp", b =>
                {
                    b.HasOne("DataLayer.Models.TransportExperience", "TransportExperience")
                        .WithMany("Transphoto")
                        .HasForeignKey("TransportExperineceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportExperience");
                });

            modelBuilder.Entity("DataLayer.Models.ServicesLikes", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "experience")
                        .WithMany("ServicesLikes")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.FoodService", "foodService")
                        .WithMany("ServicesLikes")
                        .HasForeignKey("FoodServId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Users", "users")
                        .WithMany("servicesLike")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.LodgingService", "lodgingService")
                        .WithMany("ServicesLikes")
                        .HasForeignKey("LodgingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.TransportService", "transportService")
                        .WithMany("ServicesLikes")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("experience");

                    b.Navigation("foodService");

                    b.Navigation("lodgingService");

                    b.Navigation("transportService");

                    b.Navigation("users");
                });

            modelBuilder.Entity("DataLayer.Models.SubTheme", b =>
                {
                    b.HasOne("DataLayer.Models.Theme", "theme")
                        .WithMany("themes")
                        .HasForeignKey("ThemeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("theme");
                });

            modelBuilder.Entity("DataLayer.Models.TransportExperience", b =>
                {
                    b.HasOne("DataLayer.Models.Experience", "eperience")
                        .WithMany("TransportExperience")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("eperience");
                });

            modelBuilder.Entity("DataLayer.Models.TransportReservation", b =>
                {
                    b.HasOne("DataLayer.Models.Client", "Client")
                        .WithMany("TransportReservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.TransportService", "TransportServicee")
                        .WithMany("TransportReservations")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TransportServicee");
                });

            modelBuilder.Entity("DataLayer.Models.TransportService", b =>
                {
                    b.HasOne("DataLayer.Models.Commercant", "Commercant")
                        .WithMany("TransportServices")
                        .HasForeignKey("CommercantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commercant");
                });

            modelBuilder.Entity("DataLayer.Models.UserLikes", b =>
                {
                    b.HasOne("DataLayer.Models.Client", null)
                        .WithMany("userLikes")
                        .HasForeignKey("ClientId");

                    b.HasOne("DataLayer.Models.Users", "users")
                        .WithMany("UserLike")
                        .HasForeignKey("userLikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataLayer.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataLayer.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataLayer.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Models.Activity", b =>
                {
                    b.Navigation("Activityphoto");
                });

            modelBuilder.Entity("DataLayer.Models.Experience", b =>
                {
                    b.Navigation("Activites");

                    b.Navigation("Comments");

                    b.Navigation("ExperienceDates");

                    b.Navigation("ExperiencesReservation");

                    b.Navigation("FoodExperience");

                    b.Navigation("LodgingExperience");

                    b.Navigation("Photos");

                    b.Navigation("ServicesLikes");

                    b.Navigation("TransportExperience");
                });

            modelBuilder.Entity("DataLayer.Models.FoodExperience", b =>
                {
                    b.Navigation("Foodphoto");
                });

            modelBuilder.Entity("DataLayer.Models.FoodService", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Foodhoto");

                    b.Navigation("FoodReservations");

                    b.Navigation("RestaurantPhotos");

                    b.Navigation("ServicesLikes");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingExperience", b =>
                {
                    b.Navigation("Lodgingphoto");
                });

            modelBuilder.Entity("DataLayer.Models.LodgingService", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Lodgingphoto");

                    b.Navigation("LodgingReservations");

                    b.Navigation("ServicesLikes");
                });

            modelBuilder.Entity("DataLayer.Models.Theme", b =>
                {
                    b.Navigation("themes");
                });

            modelBuilder.Entity("DataLayer.Models.TransportExperience", b =>
                {
                    b.Navigation("Transphoto");
                });

            modelBuilder.Entity("DataLayer.Models.TransportService", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ServicesLikes");

                    b.Navigation("Transportphoto");

                    b.Navigation("TransportReservations");
                });

            modelBuilder.Entity("DataLayer.Models.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("servicesLike");

                    b.Navigation("UserLike");
                });

            modelBuilder.Entity("DataLayer.Models.Client", b =>
                {
                    b.Navigation("Experiences");

                    b.Navigation("ExperiencesReservation");

                    b.Navigation("FoodReservations");

                    b.Navigation("LodgingReservations");

                    b.Navigation("TransportReservations");

                    b.Navigation("userLikes");
                });

            modelBuilder.Entity("DataLayer.Models.Hote", b =>
                {
                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("DataLayer.Models.Commercant", b =>
                {
                    b.Navigation("FoodServices");

                    b.Navigation("LodgingServices");

                    b.Navigation("TransportServices");
                });
#pragma warning restore 612, 618
        }
    }
}
